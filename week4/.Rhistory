docs <- tm_map(docs, toSpace, "老師")
docs <- tm_map(docs, toSpace, "解讀")
docs <- tm_map(docs, toSpace, "請")
docs <- tm_map(docs, toSpace, "也")
docs <- tm_map(docs, toSpace, "謝謝")
docs <- tm_map(docs, toSpace, "還")
docs <- tm_map(docs, toSpace, "和")
docs <- tm_map(docs, toSpace, "推")
docs <- tm_map(docs, toSpace, "他")
docs <- tm_map(docs, toSpace, "她")
docs <- tm_map(docs, toSpace, "了")
docs <- tm_map(docs, toSpace, "就")
docs <- tm_map(docs, toSpace, "會")
docs <- tm_map(docs, toSpace, "在")
docs <- tm_map(docs, toSpace, "要")
docs <- tm_map(docs, toSpace, "沒")
docs <- tm_map(docs, toSpace, "很")
docs <- tm_map(docs, toSpace, "說")
docs <- tm_map(docs, toSpace, "自己")
docs <- tm_map(docs, toSpace, "好")
docs <- tm_map(docs, toSpace, "想")
docs <- tm_map(docs, toSpace, "跟")
docs <- tm_map(docs, toSpace, "們")
docs <- tm_map(docs, toSpace, "妳")
docs <- tm_map(docs, toSpace, "一樣")
docs <- tm_map(docs, toSpace, "人")
docs <- tm_map(docs, toSpace, "啦")
docs <- tm_map(docs, toSpace, "只")
docs <- tm_map(docs, toSpace, "文章")
docs <- tm_map(docs, toSpace, "可能")
docs <- tm_map(docs, toSpace, "寫明")
docs <- tm_map(docs, toSpace, "可")
docs <- tm_map(docs, toSpace, "吧")
docs <- tm_map(docs, toSpace, "到")
docs <- tm_map(docs, toSpace, "因為")
docs <- tm_map(docs, toSpace, "上")
docs <- tm_map(docs, toSpace, "去")
docs <- tm_map(docs, toSpace, "嗎")
docs <- tm_map(docs, toSpace, "讓")
docs <- tm_map(docs, toSpace, "網址")
docs <- tm_map(docs, toSpace, "一直")
docs <- tm_map(docs, toSpace, "對")
docs <- tm_map(docs, toSpace, "真")
docs <- tm_map(docs, toSpace, "者")
docs <- tm_map(docs, toSpace, "做")
docs <- tm_map(docs, toSpace, "看")
docs <- tm_map(docs, toSpace, "過")
docs <- tm_map(docs, toSpace, "來")
docs <- tm_map(docs, toSpace, "啊")
docs <- tm_map(docs, toSpace, "被")
docs <- tm_map(docs, toSpace, "噓")
docs <- tm_map(docs, toSpace, "又")
docs <- tm_map(docs, toSpace, "所以")
docs <- tm_map(docs, toSpace, "覺得")
docs <- tm_map(docs, toSpace, "所以")
docs <- tm_map(docs, toSpace, "自")
docs <- tm_map(docs, toSpace, "這")
docs <- tm_map(docs, toSpace, "我")
docs <- tm_map(docs, toSpace, "您")
docs <- tm_map(docs, toSpace, "時間")
docs <- tm_map(docs, toSpace, "文字")
docs <- tm_map(docs, toSpace, "問")
docs <- tm_map(docs, toSpace, "能")
docs <- tm_map(docs, toSpace, "方")
docs <- tm_map(docs, toSpace, "事情")
docs <- tm_map(docs, toSpace, "其實")
docs <- tm_map(docs, toSpace, "然後")
docs <- tm_map(docs, toSpace, "而且")
docs <- tm_map(docs, toSpace, "題")
docs <- tm_map(docs, toSpace, "後")
docs <- tm_map(docs, toSpace, "什麼")
docs <- tm_map(docs, toSpace, "多")
docs <- tm_map(docs, toSpace, "已經")
docs <- tm_map(docs, toSpace, "什麼")
docs <- tm_map(docs, toSpace, "個")
docs <- tm_map(docs, toSpace, "比較")
docs <- tm_map(docs, toSpace, "呢")
docs <- tm_map(docs, toSpace, "出")
docs <- tm_map(docs, toSpace, "話")
docs <- tm_map(docs, toSpace, "該")
docs <- tm_map(docs, toSpace, "先")
docs <- tm_map(docs, toSpace, "中")
docs <- tm_map(docs, toSpace, "事")
docs <- tm_map(docs, toSpace, "當")
docs <- tm_map(docs, toSpace, "樣")
docs <- tm_map(docs, toSpace, "一")
docs <- tm_map(docs, toSpace, "一些")
docs <- tm_map(docs, toSpace, "一點")
docs <- tm_map(docs, toSpace, "四")
docs <- tm_map(docs, toSpace, "三")
docs <- tm_map(docs, toSpace, "一下")
docs <- tm_map(docs, toSpace, "從")
docs <- tm_map(docs, toSpace, "雖然")
docs <- tm_map(docs, toSpace, "今天")
docs <- tm_map(docs, toSpace, "找")
docs <- tm_map(docs, toSpace, "需")
docs <- tm_map(docs, toSpace, "編輯")
docs <- tm_map(docs, toSpace, "用")
docs <- tm_map(docs, toSpace, "其")
docs <- tm_map(docs, toSpace, "知道")
docs <- tm_map(docs, toSpace, "植物")
docs <- tm_map(docs, toSpace, "像")
docs <- tm_map(docs, toSpace, "發文")
docs <- tm_map(docs, toSpace, "版")
docs <- tm_map(docs, toSpace, "及")
docs <- tm_map(docs, toSpace, "無")
docs <- tm_map(docs, toSpace, "大")
docs <- tm_map(docs, toSpace, "文")
docs <- tm_map(docs, toSpace, "它")
docs <- tm_map(docs, toSpace, "為")
docs <- tm_map(docs, toSpace, "板")
docs <- tm_map(docs, toSpace, "已")
docs <- tm_map(docs, toSpace, "等")
docs <- tm_map(docs, toSpace, "內")
docs <- tm_map(docs, toSpace, "放")
docs <- tm_map(docs, toSpace, "以")
docs <- tm_map(docs, toSpace, "下")
docs <- tm_map(docs, toSpace, "交換")
docs <- tm_map(docs, toSpace, "圖片")
docs <- tm_map(docs, toSpace, "照片")
docs <- tm_map(docs, toSpace, "得")
docs <- tm_map(docs, toSpace, "主")
docs <- tm_map(docs, toSpace, "如")
docs <- tm_map(docs, toSpace, "喔")
docs <- tm_map(docs, toSpace, "報黑")
docs <- tm_map(docs, toSpace, "最近")
docs <- tm_map(docs, toSpace, "把")
docs <- tm_map(docs, toSpace, "所")
docs <- tm_map(docs, toSpace, "新增")
docs <- tm_map(docs, toSpace, "更")
docs <- tm_map(docs, toSpace, "關")
docs <- tm_map(docs, toSpace, "那")
docs <- tm_map(docs, toSpace, "規")
docs <- tm_map(docs, toSpace, "將")
docs <- tm_map(docs, toSpace, "站")
docs <- tm_map(docs, toSpace, "前")
docs <- tm_map(docs, toSpace, "給")
docs <- tm_map(docs, toSpace, "最")
docs <- tm_map(docs, toSpace, "選項")
docs <- tm_map(docs, toSpace, "些")
docs <- tm_map(docs, toSpace, "水桶")
docs <- tm_map(docs, toSpace, "公告")
docs <- tm_map(docs, toSpace, "若")
docs <- tm_map(docs, toSpace, "名")
docs <- tm_map(docs, toSpace, "提供")
docs <- tm_map(docs, toSpace, "非")
docs <- tm_map(docs, toSpace, "年月日")
docs <- tm_map(docs, toSpace, "現")
docs <- tm_map(docs, toSpace, "錯")
docs <- tm_map(docs, toSpace, "限")
docs <- tm_map(docs, toSpace, "目")
docs <- tm_map(docs, toSpace, "售")
docs <- tm_map(docs, toSpace, "買")
docs <- tm_map(docs, toSpace, "剛")
docs <- tm_map(docs, toSpace, "而")
docs <- tm_map(docs, toSpace, "圖")
docs <- tm_map(docs, toSpace, "修改")
docs <- tm_map(docs, toSpace, "使")
docs <- tm_map(docs, toSpace, "之")
docs <- tm_map(docs, toSpace, "賣家")
docs <- tm_map(docs, toSpace, "歡迎")
docs <- tm_map(docs, toSpace, "[a-zA-Z]")
docs <- tm_map(docs, toSpace, "改")
docs <- tm_map(docs, toSpace, "肉")
docs <- tm_map(docs, toSpace, "按")
docs <- tm_map(docs, toSpace, "通知")
docs <- tm_map(docs, toSpace, "相")
docs <- tm_map(docs, toSpace, "拍")
docs <- tm_map(docs, toSpace, "起")
docs <- tm_map(docs, toSpace, "求")
docs <- tm_map(docs, toSpace, "年月日")
docs <- tm_map(docs, toSpace, "精華區")
docs <- tm_map(docs, toSpace, "年月日")
#移除標點符號 (punctuation)
#移除數字 (digits)、空白 (white space)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, stripWhitespace)
docs
mixseg = worker()
jieba_tokenizer=function(d){
unlist(segment(d[[1]],mixseg))
}
seg = lapply(docs, jieba_tokenizer)
freqFrame = as.data.frame(table(unlist(seg)))
freqFrame = freqFrame[order(freqFrame$Freq,decreasing=TRUE), ]
library(knitr)
kable(head(freqFrame), format = "markdown")
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
library(dplyr)
setwd("D:/github/NTU_R/week4")
library(dplyr)
library(ggplot2)
#記得要先設定好工作路徑跟相對檔名(點選 more 裡的 set as working directory)
# Read in data files from `open-data` and `world-happiness` datasets
open_data <- read.csv("countries.csv", stringsAsFactors=F)
happiness <- read.csv("2015.csv", stringsAsFactors=F)
#stringsAsFactors = FALSE tells R to keep character variables as they are rather than convert to factors, which are a little harder to work with.(不讓r將character 轉成 factor)
# Rename from "Country Name" to just "Country" so it's easier to join
colnames(open_data)[2] <- "Country"
#colnames()可以改column的名字
# Join the two dataset files on "Country"
open_data_happiness <- open_data %>%
left_join(happiness, by = "Country") %>%
mutate(Country = factor(Country)) %>%
# Keep only columns I plan to use
select(Country, Region, X2015.Score, Happiness.Score, Economy..GDP.per.Capita.,
Family, Health..Life.Expectancy., Freedom, Trust..Government.Corruption.,
Generosity, Dystopia.Residual)
#left_join可以藉由兩數據中相同的column來做連接，並且是往左增加
# Give the columns nicer names now that our data is in one dataframe
colnames(open_data_happiness) <- c("Country", "Region", "Openness", "Happiness", "GDP", "Family", "Health", "Freedom", "Trust", "Generosity", "DystopiaResidual")
library(dplyr)
library(ggplot2)
warning=FALSE
#記得要先設定好工作路徑跟相對檔名(點選 more 裡的 set as working directory)
# Read in data files from `open-data` and `world-happiness` datasets
open_data <- read.csv("countries.csv", stringsAsFactors=F)
happiness <- read.csv("2015.csv", stringsAsFactors=F)
#stringsAsFactors = FALSE tells R to keep character variables as they are rather than convert to factors, which are a little harder to work with.(不讓r將character 轉成 factor)
# Rename from "Country Name" to just "Country" so it's easier to join
colnames(open_data)[2] <- "Country"
#colnames()可以改column的名字
# Join the two dataset files on "Country"
open_data_happiness <- open_data %>%
left_join(happiness, by = "Country") %>%
mutate(Country = factor(Country)) %>%
# Keep only columns I plan to use
select(Country, Region, X2015.Score, Happiness.Score, Economy..GDP.per.Capita.,
Family, Health..Life.Expectancy., Freedom, Trust..Government.Corruption.,
Generosity, Dystopia.Residual)
#left_join可以藉由兩數據中相同的column來做連接，並且是往左增加
# Give the columns nicer names now that our data is in one dataframe
colnames(open_data_happiness) <- c("Country", "Region", "Openness", "Happiness", "GDP", "Family", "Health", "Freedom", "Trust", "Generosity", "DystopiaResidual")
library(formattable)
#formmatable可將數據格式化，如百分比，逗號，貨幣，會計和科學，並用表格呈現，是一種易於閱讀的方式
#將資料依開放程度排名，並四捨五入資料至小數第二位，再選出前十
open_data_happiness%>%
arrange(desc(Openness))%>%
#mutate_each中的計算會套用至每一行column，用round四捨五入至小數點第二位，其中Country,Region,Opennes 不用被計算
mutate_each(funs(round(.,2)),-c(Country,Region,Openness))%>%
head(10)%>%
formattable(list(
Openness = color_bar("yellow"),
Happiness = color_bar("pink"),
GDP = color_bar("deepskyblue"),
Family = color_bar("deepskyblue"),
Health = color_bar("deepskyblue"),
Freedom = color_bar("deepskyblue"),
Trust = color_bar("deepskyblue"),
Generosity = color_bar("deepskyblue"),
DystopiaResidual = color_bar("deepskyblue")
), align = "l"
)
#表格完成
library(ggplot2)
library(ggthemes)
library(viridis)
ggplot(open_data_happiness,
aes(x = Openness,
y = Happiness)) +
geom_point(aes(colour = Region),
size = 2) +
#以region為點點顏色的分別基準
geom_smooth(method="lm") +
#geom_smooth可以劃出趨勢曲線
labs(x = "Openness Score",
y = "Happiness Score",
title = "Are open data friendly countries happy countries?",
subtitle = "Data openness and happiness by country in 2015") +
scale_color_viridis(discrete = T) +
#scale_color_viridis讓顏色漸層有方向
theme_minimal() +
theme(text = element_text(size=16))
ggplot(data = open_data_happiness, aes(x = Generosity, y = Happiness)) +
geom_point()
#好像看不出關係
choose<-open_data_happiness%>%filter(Region== "Eastern Asia"|Region=="Western Europe" )
ggplot(choose,aes(x=Region,y=Generosity))+geom_boxplot() +coord_flip()
with(choose,
tapply(Generosity, Region,
function(x)
c(mean(x) + c(-2, 2) * sd(x)/sqrt(length(x)))))
#以下用 t-test 檢驗不同區域是否存在慷慨程度差異
t.test(Generosity ~ Region, data = choose)
t.test(Generosity ~ Region, data = choose, var.equal = TRUE)
#p-value = 0.2234，兩種文化區的慷慨程度分布相似
open_data_happiness$Region <- factor(open_data_happiness$Region,
levels = c('Eastern Asia',
'Western Europe',
'North America',
'Latin America and Caribbean',
'Central and Eastern Europe',
'Southern Asia',
'Southeastern Asia',
'Middle East and Northern Africa',
'Sub-Saharan Africa',
'Australia and New Zealand'))
library(Hmisc)
tapply(open_data_happiness$Generosity, open_data_happiness$Region, mean)
library(Hmisc)
tapply(open_data_happiness$Generosity, open_data_happiness$Region, mean)
ggplot(data = open_data_happiness,
aes(x = open_data_happiness$Region, y = open_data_happiness$Generosity)) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
geom_hline(yintercept = mean(open_data_happiness$Generosity) ,
linetype = 'dotted') +
labs(x = '慷慨程度', y = '區域')+
coord_flip()
anova(m1 <- lm(Generosity ~ Region, data = open_data_happiness))
#畫圖
#如果不分區域來看關係
ggplot(data = open_data_happiness, aes(y = Generosity, x = Happiness)) +
geom_point() +
stat_smooth(method = 'lm', se = F) +
labs(x = '快樂指數', y = '慷慨指數')
choose1<-open_data_happiness%>%filter(Region!="NA")
ggplot(data = choose1,
aes(group = Region,
y = Generosity, x = Happiness)) +
geom_point() +
stat_smooth(aes(group = Region,
y = Generosity, x = Happiness),
method = 'lm', se = F) +
facet_grid( . ~  Region) +
labs(x = '快樂指數', y = '慷慨指數')
ggplot(data = open_data_happiness, aes(y = Generosity, x = GDP)) +
geom_point() +
stat_smooth(method = 'lm', se = F) +
labs(x = 'GDP', y = '慷慨指數')
ggplot(data = choose1,
aes(group = Region,
y = Generosity, x = GDP)) +
geom_point() +
stat_smooth(aes(group = Region,
y = Generosity, x = GDP),
method = 'lm', se = F) +
facet_grid( . ~  Region) +
labs(x = 'GDP', y = '慷慨指數')
ggplot(data = open_data_happiness, aes(y = Generosity, x = Freedom)) +
geom_point() +
stat_smooth(method = 'lm', se = F) +
labs(x = 'Freedom', y = '慷慨指數')
ggplot(data = choose1,
aes(group = Region,
y = Generosity, x = Freedom)) +
geom_point() +
stat_smooth(aes(group = Region,
y = Generosity, x = Freedom),
method = 'lm', se = F) +
facet_grid( . ~  Region) +
labs(x = 'Freedom', y = '慷慨指數')
anova(m2 <- update(m1, . ~ . +
Happiness, data = open_data_happiness))
anova(m3 <- update(m2, . ~ . - Region,  data = open_data_happiness))
res_lm <- lapply(list(m1, m2, m3), summary)
(res_lm[[2]]$r.sq - res_lm[[3]]$r.sq)/res_lm[[2]]$r.sq
anova(m3, m2)
(res_lm[[2]]$r.sq - res_lm[[1]]$r.sq)/res_lm[[1]]$r.sq
anova(m1, m2)
require(coefplot)
m2 <- lm(Generosity ~ Region+Happiness- 1,
data = open_data_happiness)
coefplot(m2, xlab = '估計值', ylab = '迴歸變項', title = '反應變項 = 慷慨分數')
fit_m2 <- data.frame(choose1[, c(10, 2, 4)], fitted = fitted(m2), resid = resid(m2),
infl = influence(m2)$hat )
ggplot(data = fit_m2, aes(x = Generosity, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(choose1, tapply(Generosity,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(0, 1, by = 100))+
labs(x = '數學分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = Generosity, group = Region )) +
#stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(choose1, tapply(Generosity,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(0, 1, by = 100))+
labs(x = '數學分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = Generosity, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
#stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
#geom_vline(xintercept = c(with(choose1, tapply(Generosity,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(0, 1, by = 100))+
labs(x = '數學分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = Generosity, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
#stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(choose1, tapply(Generosity,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(0, 1, by = 100))+
labs(x = '數學分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = Generosity, group = Region )) +
#stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
#geom_vline(xintercept = c(with(choose1, tapply(Generosity,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(0, 1, by = 100))+
labs(x = '數學分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = Generosity, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
#geom_vline(xintercept = c(with(choose1, tapply(Generosity,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(0, 1, by = 100))+
labs(x = '數學分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = Generosity, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(choose1, tapply(Generosity,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(0, 1, by = 100))+
labs(x = '數學分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = Generosity, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(choose1, tapply(Generosity,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(0, 1, by = 100))+
labs(x = '數學分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = Generosity, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(choose1, tapply(Generosity,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(0, 1, by = 100))+
labs(x = '慷慨分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = Generosity, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(choose1, tapply(Generosity,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(0, 1, by = 100))+
labs(x = '慷慨分數', y = '機率密度')
ggplot(data = fit_m2, aes(x = scale(resid)), group = Region ) +
stat_density(geom = 'path', position = 'identity', aes(linetype = Region)) +
scale_linetype_manual(values = 10:1) +
guides(linetype = guide_legend(reverse = TRUE)) +
labs(x = '標準化殘差', y = '機率密度')
require(lattice)
qqmath(~ scale(resid) |Region , data = fit_m2, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 2)
require(MASS)
ggplot(data = fit_m2, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Region ~ .) +
labs(x = '慷慨指數預測值', y = '標準化殘差')
ggplot(data = fit_m2, aes(x = infl, y = scale(resid), group =Region)) +
geom_text(aes(label = rownames(fit_m2)), cex = 2) +
geom_hline(yintercept = 0, linetype = 'dotted') +
facet_grid(Region ~ .) +
labs(x = '影響值', y = '標準化殘差')
summary(influence(m2)$hat)
dta_happy <- choose1[, c('Openness','Happiness','GDP','Family','Health','Freedom','Trust' ,'Generosity',
'DystopiaResidual')]
colMeans(dta_happy)
#呈現兩兩散佈圖
require(heplots)
scatterplotMatrix(~ Generosity + Openness + Happiness + GDP+Family+Health+Freedom+Trust+DystopiaResidual, data= choose1,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
dta_happy1 <- choose1[, c('Openness','Happiness','GDP','Family','Freedom','Trust' ,'Generosity')]
require(heplots)
scatterplotMatrix(~ Generosity + Openness + Happiness + GDP+Family+Freedom+Trust, data= choose1,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
require(corrplot)
corrplot(cor(dta_happy), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(dta_happy), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
require(corrplot)
corrplot(cor(dta_happy), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
corrplot(cor(dta_happy), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
summary(m4 <- lm(Generosity ~ Freedom + Trust + Happiness, data =dta_happy ))
#看看控制信任與幸福後，自由的效果
summary(m5 <- update(m4, . ~ . - Freedom , data = dta_happy))
anova(m5, m4)
m5 <- lm(Generosity ~ Freedom + Region + Happiness + Trust, data = choose1)
fit_m5 <- data.frame(choose1[, c(10, 8, 2, 4, 9)], fitted = fitted(m5), resid = resid(m5), infl = influence(m5)$hat)
ggplot(data = fit_m5, aes(x = Generosity, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(choose1, tapply(Generosity, Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = '數學分數', y = '機率密度')
summary(m4 <- lm(Generosity ~ Freedom + Trust + Happiness, data =dta_happy ))
summary(m4 <- lm(Generosity ~ Freedom + Trust + Happiness, data =dta_happy ))
summary(m5 <- update(m4, . ~ . - Freedom , data = dta_happy))
anova(m5, m4)
m5 <- lm(Generosity ~ Freedom + Region + Happiness + Trust, data = choose1)
fit_m5 <- data.frame(choose1[, c(10, 8, 2, 4, 9)], fitted = fitted(m5), resid = resid(m5), infl = influence(m5)$hat)
ggplot(data = fit_m5, aes(x = Generosity, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(choose1, tapply(Generosity, Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = '慷慨分數', y = '機率密度')
